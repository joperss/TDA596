def board(ip, port, sockobj, thiscommhandle, listencommhandle):
  msgheader = sockobj.recv(1024) # Receive message, 
  
  # The HTML code is divided in two parts, htmlpartone and hmtlparttwo.
  # mycontext['htmlinputtable'] i then inserted between them
  htmlpartone = """<html><head>
  <meta content="text/html; charset=utf-8" http-equiv="content-type">
  <title>Blackboard GroupName</title>
</head>
<body>
  <h2> Board Content</h2>"""

  htmlparttwo = """
  <br>
  <h3>Submit to board<h3>
  <textarea rows="4" cols="50" name="comment" form="usrform"></textarea>
  <form action="" id="usrform" method="post">
  <input type="submit">
  </form>
</body></html>"""

  # React depending on message type: HTTP GET or POST, or some other type of communication.
  if msgheader.startswith( 'GET' ):
    htmlresponse = htmlpartone + mycontext['htmlinputtable'] + htmlparttwo
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))
    stopcomm(thiscommhandle)   
  elif msgheader.startswith( 'POST' ):
    mycontext['htmlinputtable'] = mycontext['htmlinputtable'] + "<p>" + msgheader.split('comment=')[-1] + "</p>" # Update local vessel blackboard
    htmlresponse = htmlpartone + mycontext['htmlinputtable'] + htmlparttwo
    sockobj.send("HTTP/1.1 200 OK\r\nContent-type: text/html\r\n" + \
    "Content-length: %i\r\n\r\n%s" % (len(htmlresponse), htmlresponse))

    # Update all vessels blackboard model. (Still need to hit refresh on remote hosts)
    for ipn in mycontext['vessels']:
      if(ipn != getmyip()):
        s = openconn(ipn, 63112) 
        s.send("<p>" + msgheader.split('comment=')[-1] + "</p>")

    stopcomm(thiscommhandle)   
	
  # Message sent from POST to update the mycontext['htmlinputtable']
  # (is not sent to local node)
  else:
    mycontext['htmlinputtable'] = mycontext['htmlinputtable'] + msgheader
	
if callfunc == 'initialize':

  mycontext['htmlinputtable'] = "" # The blackboard
  if len(callargs) > 2:
    raise Exception("Too many call arguments")

  # Running remotely (assuming that we pass input argument only remotely):
  # whenever this vessel gets a connection on its IPaddress:Clearinghouseport it'll call function board
  elif len(callargs) == 2:
    port = int(callargs[0])
	
    mycontext['vessels'] = [] # Dictionary for all vessels (not scalable solution)
    ip = getmyip()
    ipfile = open(callargs[1],'r')
    for line in ipfile:
      mycontext['vessels'].append(line.split()[0])
	
  # Running locally:
  # whenever we get a connection on 127.0.0.1:12345 we'll call board
  else:
    port = 12345
    ip = '127.0.0.1'
  
  listencommhandle = waitforconn(ip,port,board)
